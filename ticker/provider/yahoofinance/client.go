// Package yahoofinance provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package yahoofinance

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for GetV8FinanceChartSymbolParamsRange.
const (
	GetV8FinanceChartSymbolParamsRangeMax  GetV8FinanceChartSymbolParamsRange = "max"
	GetV8FinanceChartSymbolParamsRangeN10y GetV8FinanceChartSymbolParamsRange = "10y"
	GetV8FinanceChartSymbolParamsRangeN1d  GetV8FinanceChartSymbolParamsRange = "1d"
	GetV8FinanceChartSymbolParamsRangeN1mo GetV8FinanceChartSymbolParamsRange = "1mo"
	GetV8FinanceChartSymbolParamsRangeN1y  GetV8FinanceChartSymbolParamsRange = "1y"
	GetV8FinanceChartSymbolParamsRangeN2y  GetV8FinanceChartSymbolParamsRange = "2y"
	GetV8FinanceChartSymbolParamsRangeN3mo GetV8FinanceChartSymbolParamsRange = "3mo"
	GetV8FinanceChartSymbolParamsRangeN5d  GetV8FinanceChartSymbolParamsRange = "5d"
	GetV8FinanceChartSymbolParamsRangeN5y  GetV8FinanceChartSymbolParamsRange = "5y"
	GetV8FinanceChartSymbolParamsRangeN6mo GetV8FinanceChartSymbolParamsRange = "6mo"
	GetV8FinanceChartSymbolParamsRangeYtd  GetV8FinanceChartSymbolParamsRange = "ytd"
)

// Defines values for GetV8FinanceChartSymbolParamsInterval.
const (
	GetV8FinanceChartSymbolParamsIntervalN15m GetV8FinanceChartSymbolParamsInterval = "15m"
	GetV8FinanceChartSymbolParamsIntervalN1d  GetV8FinanceChartSymbolParamsInterval = "1d"
	GetV8FinanceChartSymbolParamsIntervalN1m  GetV8FinanceChartSymbolParamsInterval = "1m"
	GetV8FinanceChartSymbolParamsIntervalN1mo GetV8FinanceChartSymbolParamsInterval = "1mo"
	GetV8FinanceChartSymbolParamsIntervalN1wk GetV8FinanceChartSymbolParamsInterval = "1wk"
	GetV8FinanceChartSymbolParamsIntervalN2m  GetV8FinanceChartSymbolParamsInterval = "2m"
	GetV8FinanceChartSymbolParamsIntervalN30m GetV8FinanceChartSymbolParamsInterval = "30m"
	GetV8FinanceChartSymbolParamsIntervalN3mo GetV8FinanceChartSymbolParamsInterval = "3mo"
	GetV8FinanceChartSymbolParamsIntervalN5d  GetV8FinanceChartSymbolParamsInterval = "5d"
	GetV8FinanceChartSymbolParamsIntervalN5m  GetV8FinanceChartSymbolParamsInterval = "5m"
	GetV8FinanceChartSymbolParamsIntervalN60m GetV8FinanceChartSymbolParamsInterval = "60m"
	GetV8FinanceChartSymbolParamsIntervalN90m GetV8FinanceChartSymbolParamsInterval = "90m"
)

// TradingPeriod defines model for TradingPeriod.
type TradingPeriod struct {
	End       *int    `json:"end,omitempty"`
	Gmtoffset *int    `json:"gmtoffset,omitempty"`
	Start     *int    `json:"start,omitempty"`
	Timezone  *string `json:"timezone,omitempty"`
}

// GetV8FinanceChartSymbolParams defines parameters for GetV8FinanceChartSymbol.
type GetV8FinanceChartSymbolParams struct {
	// Range Time range of the chart data.
	Range GetV8FinanceChartSymbolParamsRange `form:"range" json:"range"`

	// Interval Data granularity of chart intervals.
	Interval GetV8FinanceChartSymbolParamsInterval `form:"interval" json:"interval"`
}

// GetV8FinanceChartSymbolParamsRange defines parameters for GetV8FinanceChartSymbol.
type GetV8FinanceChartSymbolParamsRange string

// GetV8FinanceChartSymbolParamsInterval defines parameters for GetV8FinanceChartSymbol.
type GetV8FinanceChartSymbolParamsInterval string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV8FinanceChartSymbol request
	GetV8FinanceChartSymbol(ctx context.Context, symbol string, params *GetV8FinanceChartSymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV8FinanceChartSymbol(ctx context.Context, symbol string, params *GetV8FinanceChartSymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV8FinanceChartSymbolRequest(c.Server, symbol, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV8FinanceChartSymbolRequest generates requests for GetV8FinanceChartSymbol
func NewGetV8FinanceChartSymbolRequest(server string, symbol string, params *GetV8FinanceChartSymbolParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "symbol", runtime.ParamLocationPath, symbol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v8/finance/chart/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "range", runtime.ParamLocationQuery, params.Range); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, params.Interval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV8FinanceChartSymbolWithResponse request
	GetV8FinanceChartSymbolWithResponse(ctx context.Context, symbol string, params *GetV8FinanceChartSymbolParams, reqEditors ...RequestEditorFn) (*GetV8FinanceChartSymbolResponse, error)
}

type GetV8FinanceChartSymbolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Chart *struct {
			// Error Null if no error
			Error  *map[string]interface{} `json:"error"`
			Result *[]struct {
				Indicators *struct {
					Quote *[]struct {
						Close  *[]float32 `json:"close,omitempty"`
						High   *[]float32 `json:"high,omitempty"`
						Low    *[]float32 `json:"low,omitempty"`
						Open   *[]float32 `json:"open,omitempty"`
						Volume *[]int     `json:"volume,omitempty"`
					} `json:"quote,omitempty"`
				} `json:"indicators,omitempty"`
				Meta *struct {
					ChartPreviousClose   *float32 `json:"chartPreviousClose,omitempty"`
					Currency             *string  `json:"currency,omitempty"`
					CurrentTradingPeriod *struct {
						Post    *TradingPeriod `json:"post,omitempty"`
						Pre     *TradingPeriod `json:"pre,omitempty"`
						Regular *TradingPeriod `json:"regular,omitempty"`
					} `json:"currentTradingPeriod,omitempty"`
					DataGranularity      *string            `json:"dataGranularity,omitempty"`
					ExchangeName         *string            `json:"exchangeName,omitempty"`
					ExchangeTimezoneName *string            `json:"exchangeTimezoneName,omitempty"`
					FiftyTwoWeekHigh     *float32           `json:"fiftyTwoWeekHigh,omitempty"`
					FiftyTwoWeekLow      *float32           `json:"fiftyTwoWeekLow,omitempty"`
					FirstTradeDate       *int               `json:"firstTradeDate,omitempty"`
					FullExchangeName     *string            `json:"fullExchangeName,omitempty"`
					Gmtoffset            *int               `json:"gmtoffset,omitempty"`
					HasPrePostMarketData *bool              `json:"hasPrePostMarketData,omitempty"`
					InstrumentType       *string            `json:"instrumentType,omitempty"`
					LongName             *string            `json:"longName,omitempty"`
					PreviousClose        *float32           `json:"previousClose,omitempty"`
					PriceHint            *int               `json:"priceHint,omitempty"`
					Range                *string            `json:"range,omitempty"`
					RegularMarketDayHigh *float32           `json:"regularMarketDayHigh,omitempty"`
					RegularMarketDayLow  *float32           `json:"regularMarketDayLow,omitempty"`
					RegularMarketPrice   *float32           `json:"regularMarketPrice,omitempty"`
					RegularMarketTime    *int               `json:"regularMarketTime,omitempty"`
					RegularMarketVolume  *int               `json:"regularMarketVolume,omitempty"`
					Scale                *int               `json:"scale,omitempty"`
					ShortName            *string            `json:"shortName,omitempty"`
					Symbol               *string            `json:"symbol,omitempty"`
					Timezone             *string            `json:"timezone,omitempty"`
					TradingPeriods       *[][]TradingPeriod `json:"tradingPeriods,omitempty"`
					ValidRanges          *[]string          `json:"validRanges,omitempty"`
				} `json:"meta,omitempty"`
				Timestamp *[]int `json:"timestamp,omitempty"`
			} `json:"result,omitempty"`
		} `json:"chart,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV8FinanceChartSymbolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV8FinanceChartSymbolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV8FinanceChartSymbolWithResponse request returning *GetV8FinanceChartSymbolResponse
func (c *ClientWithResponses) GetV8FinanceChartSymbolWithResponse(ctx context.Context, symbol string, params *GetV8FinanceChartSymbolParams, reqEditors ...RequestEditorFn) (*GetV8FinanceChartSymbolResponse, error) {
	rsp, err := c.GetV8FinanceChartSymbol(ctx, symbol, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV8FinanceChartSymbolResponse(rsp)
}

// ParseGetV8FinanceChartSymbolResponse parses an HTTP response from a GetV8FinanceChartSymbolWithResponse call
func ParseGetV8FinanceChartSymbolResponse(rsp *http.Response) (*GetV8FinanceChartSymbolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV8FinanceChartSymbolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Chart *struct {
				// Error Null if no error
				Error  *map[string]interface{} `json:"error"`
				Result *[]struct {
					Indicators *struct {
						Quote *[]struct {
							Close  *[]float32 `json:"close,omitempty"`
							High   *[]float32 `json:"high,omitempty"`
							Low    *[]float32 `json:"low,omitempty"`
							Open   *[]float32 `json:"open,omitempty"`
							Volume *[]int     `json:"volume,omitempty"`
						} `json:"quote,omitempty"`
					} `json:"indicators,omitempty"`
					Meta *struct {
						ChartPreviousClose   *float32 `json:"chartPreviousClose,omitempty"`
						Currency             *string  `json:"currency,omitempty"`
						CurrentTradingPeriod *struct {
							Post    *TradingPeriod `json:"post,omitempty"`
							Pre     *TradingPeriod `json:"pre,omitempty"`
							Regular *TradingPeriod `json:"regular,omitempty"`
						} `json:"currentTradingPeriod,omitempty"`
						DataGranularity      *string            `json:"dataGranularity,omitempty"`
						ExchangeName         *string            `json:"exchangeName,omitempty"`
						ExchangeTimezoneName *string            `json:"exchangeTimezoneName,omitempty"`
						FiftyTwoWeekHigh     *float32           `json:"fiftyTwoWeekHigh,omitempty"`
						FiftyTwoWeekLow      *float32           `json:"fiftyTwoWeekLow,omitempty"`
						FirstTradeDate       *int               `json:"firstTradeDate,omitempty"`
						FullExchangeName     *string            `json:"fullExchangeName,omitempty"`
						Gmtoffset            *int               `json:"gmtoffset,omitempty"`
						HasPrePostMarketData *bool              `json:"hasPrePostMarketData,omitempty"`
						InstrumentType       *string            `json:"instrumentType,omitempty"`
						LongName             *string            `json:"longName,omitempty"`
						PreviousClose        *float32           `json:"previousClose,omitempty"`
						PriceHint            *int               `json:"priceHint,omitempty"`
						Range                *string            `json:"range,omitempty"`
						RegularMarketDayHigh *float32           `json:"regularMarketDayHigh,omitempty"`
						RegularMarketDayLow  *float32           `json:"regularMarketDayLow,omitempty"`
						RegularMarketPrice   *float32           `json:"regularMarketPrice,omitempty"`
						RegularMarketTime    *int               `json:"regularMarketTime,omitempty"`
						RegularMarketVolume  *int               `json:"regularMarketVolume,omitempty"`
						Scale                *int               `json:"scale,omitempty"`
						ShortName            *string            `json:"shortName,omitempty"`
						Symbol               *string            `json:"symbol,omitempty"`
						Timezone             *string            `json:"timezone,omitempty"`
						TradingPeriods       *[][]TradingPeriod `json:"tradingPeriods,omitempty"`
						ValidRanges          *[]string          `json:"validRanges,omitempty"`
					} `json:"meta,omitempty"`
					Timestamp *[]int `json:"timestamp,omitempty"`
				} `json:"result,omitempty"`
			} `json:"chart,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
